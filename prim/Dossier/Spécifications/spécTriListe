spéc TRI_LISTE étend LISTE_ARETES
	sorte listeAretes
	
Opérations:
	partition: listeAretes, Nat, Nat -> listeAretes // renvoie une liste partionnée autour d'un pivot
	triListeAux: listeAretes, Nat, Nat -> listeAretes // prend une liste d'aretes et la trie entre deux bornes
	triListe: listeAretes -> listeAretes // tri une liste d'aretes

Pré-conditions:
	pré-partition(l,i,j)=pré-triListeAux(l,i,j)=i<=j et j>=0 et i>=0

Axiomes:
	partition(l,dbt,fin)=
		init j←dbt
		init i←dbt+1
		init pivot←dbt
		tant_que i<fin faire
			si arclen(l[i])<pivot alors 
				j←j+1
				echArete(l,j,i)
			fin_si
		fait
		echArete(l,j,pivot)
		retourner j
	triListeAux(l,i,j)=
		si i<j alors
			init k ← partition(l,i,j)
			l=triListrAux(triListeAux(l,k+1,j),dbt,k-1)
		fin_si
		retourner l
	triListe(l)=triListeAux(l,0,tailleListe(l))
	
fin_spéc
