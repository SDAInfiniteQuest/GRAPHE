#include "listeAretes.h"
#include <stdlib.h>
#include <stdio.h>


listeAretes listeNouv()
{
	listeAretes l=(listeAretes) malloc(sizeof(strListeAretes));
	l->liste=(arete*) calloc(MAX_SOMMET*MAX_SOMMET,sizeof(arete));
	l->offset=0;
	return l;
}

listeAretes adjElt(listeAretes l,arete a)
{
	l->liste[l->offset++]=a;
	return l;
}

listeAretes supElt(listeAretes l,arete a)
{
	int i;
	for(i=0;i<l->offset;i++)
	{
		if(egArete(l->liste[i],a)) 
		{
			l=echArete(l,i,(l->offset-1));
			free(l->liste[l->offset--]);
			break;
		}
	}
	return l;
}

listeAretes echArete(listeAretes l,Nat i,Nat j)
{
	arete tmp;
	tmp=l->liste[i];
	l->liste[i]=l->liste[j];
	l->liste[j]=tmp;
	return l;
}

Nat tailleListe(listeAretes l)
{
	return l->offset;
}
/*
listeAretes triListe(listeAretes l,Nat debut,Nat fin)
{
	arete *tab=l->liste; 
	if((int)debut<(int)fin)
	{
		int i=(int)(1+debut);
		int j=(int)(fin-1);
		while(i<j)
		{
			if((tab[i]->l<tab[debut]->l)&&(i<j)) i++;
			if((tab[j]->l>tab[debut]->l)&&(i<j)) j--;
			if(i<j) echArete(l,i,j);
		}
		echArete(l,j,debut);
		if((j)>(int)debut) l=triListe(l,debut,j);
		if((j+1)<(int)(fin)-1) l=triListe(l,j+1,fin);
	}
	return l;
}
*/
Nat partition(listeAretes l,Nat debut,Nat fin)
{
	Nat compt=debut;
	Nat pivot=l->liste[debut]->l;
	Nat i;

	for(i=debut+1;i<=fin;i++)
	{
		if(l->liste[i]->l<pivot)
		{
			compt++;
			echArete(l,compt,i);
		}
	}
	echArete(l,compt,debut);
	return compt;
}

listeAretes triListeAux(listeAretes l,Nat debut,Nat	fin)
{
	if(debut<fin)
	{
		Nat	pivot=partition(l,debut,fin);
		triListeAux(l,debut,pivot-1);
		triListeAux(l,pivot+1,fin);
	}
	return l;
}

listeAretes triListe(listeAretes l)
{
	return triListeAux(l,0,l->offset-1);
}

arete plusPetit(listeAretes l)
{
	return l->liste[0];
}

void supListeAretes(listeAretes l)
{
	int i;
	for(i=0;i<l->offset;i++)
	{
		free(l->liste[i]);
	}
	free(l->liste);
	free(l);
}


